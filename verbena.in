#!/bin/sh

# Verbena: Perfusion quantification from DSC-MRI using the Vascular Model
#
# Michael Chappell, QuBIc & FMRIB Image Analysis Group
#
# Copyright (c) 2012-13 University of Oxford
#
# SHCOPYRIGHT

# Make script use local copies of helper scripts/programs in the same
# directory, if present. This allows for multiple versions of the scripts
# to be used, possibly with bundled dependencies
if [ -z "${FSLDEVDIR}" ]; then
    FSLPATH="${FSLDIR}/bin"
else
    FSLPATH="${FSLDEVDIR}/bin:${FSLDIR}/bin"
fi
PATH=`dirname $0`:${FSLPATH}:${PATH}

echo "VERBENA version tag '@GIT_SHA1@'"
echo "last commit '@GIT_DATE@'"
echo

Usage() {
    echo "Perfusion quantification from DSC-MRI using the Vascular Model"
    echo ""
    echo "Usage (optional parameters in {}):"
    echo " -i         : specify data file"
    echo " -a         : specify aif data"
    echo " {-o}       : specify output directory"
    echo " -m         : specify brain mask file"
    echo " {-tr}     : TR (in s) {default: 1.5 s}"
    echo " {-te}     : TE (in s) {default: 0.065 s}"
    echo ""
    echo "Options:"
    echo " -aifconc       : AIF curve is a concentration curve rather than a signal curve"
    echo " -mv            : Add a macro vascular component"
    echo " -sigadd        : Add MV component in signal domain (rather than concentrations)"
    echo " -modelfree     : Run a 'model free' SVD analysis"
    echo " -modelfreeinit : Use a 'model free' analysis as initialization for the VM"
    echo " -save-residue  : Save the residue function output from the VM"
    echo " -save-model-fit: Save the model fit output from the VM"
    echo " -logcbf        : Use log transformation on CBF parameter (can improve stability of fitting)"
    echo " -debug         : Save additional fitting data to a folder named 'temp'"
    echo ""
}

# deal with options

if [ -z $1 ]; then
    Usage
    exit 1
fi

until [ -z $1 ]; do
    case $1 in
	-o) outflag=1 outdir=$2
	    shift;;
	-i) inflag=1 infile=$2 #input/data file
	    shift;;
	-m) mask=$2
	    shift;;
	-a) aif=$2
	    shift;;
	-tr) tr=$2
	    shift;;
	-te) te=$2
	    shift;;
	-aifconc) aifconc=1
	    ;;
	-sigadd) sigadd=1
	    ;;
	-modelfree) modelfree=1
	    ;;
	-mv) mv=1
	    ;;
	-modelfreeinit) modelfreeinit=1
	    ;;
	-logcbf) logcbf=1
	    ;;
	-save-residue) save_residue=1
	    ;;
	-save-model-fit) save_model_fit=1
	    ;;
	-debug) debug=1;; #debugging option
	*)  Usage
	    echo "Error! Unrecognised option on command line: $1"
	    echo ""
	    exit 1;;
    esac
    shift
done

#### --- Procedural ---
fabber=fabber_dsc
asl_mfree=asl_mfree
mvntool=mvntool

# save the starting directory
stdir=`pwd`

#### --- Housekeeping ---
# set the output directory here if not specified
if [ -z $outflag ]; then
    outdir=$stdir/verbena;
    echo "Ouput being placed in $outdir"
fi

# Start by looking for the output directory (and create if need be)
if [ ! -d $outdir ]; then
echo "Creating output directory: $outdir"
mkdir $outdir;
fi



# make a temp directory to work in
if [ ! -z $debug ]; then
    tempdir=`pwd`/temp
else
    tmpbase=`tmpnam`
    tempdir=${tmpbase}_verbena
fi
mkdir $tempdir
# Required for mask generation
imcp $infile $tempdir/data
cd $tempdir

# parameters
#TR
if [ -z $tr ]; then
tr=1.5;
fi

#TE
if [ -z $te ]; then
te=0.065;
fi

#### --- Pre-processing ---
if [ -z $mask ]; then
# auto generate mask
    fslmaths data -Tmean datamean
    bet datamean brain -m
    immv brain_mask mask
else
    cd "$stdir"
    imcp $mask $tempdir/mask
    cd $tempdir
fi

cd "$stdir" 
# copy mask to output for future reference
imcp $tempdir/mask $outdir/mask
# copy in data and aif
imcp $infile $tempdir/data
imcp $aif $tempdir/aif
cd $tempdir

# calcualte concentration time curves
nzero=1 # number of time points to use from start of data to calculate S0
#data
fslroi data szero 0 $nzero
fslmaths szero -Tmean szero
fslmaths data -div szero -log -div $te -mul -1 concdata
#aif
if [ -z $aifconc ]; then
    # if the AIF is raw timeseries convert to conc
    fslroi aif szero_aif 0 $nzero
    fslmaths szero_aif -Tmean szero_aif
    fslmaths aif -div szero_aif -log -div $te -mul -1 concaif
else
    fslmaths aif concaif
fi

### --- Analysis ---
# --- [Model Free] ---
if [ ! -z $modelfree ] || [ ! -z $modelfreeinit ]; then
    echo "Begin model-free analysis"
    
    # do deconvolution
    $asl_mfree --data=concdata --mask=mask --out=modfree --aif=concaif --dt=$tr
    
    # ASL_MFREE can produce nans if the mask is poor
    fslmaths modfree_magntiude -nan modfree_magnitude_nonans
    fslmaths modfree_residuals -nan modfree_residuals_nonans

    #calculate cbv
    fslmaths concdata -Tmean -mul `fslnvols concdata` concsum
    fslmaths concaif -Tmean -mul `fslnvols concaif` aifsum
    fslmaths concsum -div aifsum cbv
    
    # calcualte MTT
    fslmaths cbv -div modfree_magnitude_nonans mtt
    
    #copy results to output directory
    cd "$stdir"
    mkdir $outdir/modelfree
    fslmaths $tempdir/modfree_magnitude_nonans $outdir/modelfree/rcbf
    fslmaths $tempdir/cbv $outdir/modelfree/cbv
    fslmaths $tempdir/mtt $outdir/modelfree/mtt
    cd $tempdir
fi

# --- [Vascular Model] ---
if [ -z $modelfree ]; then 
    echo "Begin VM analysis"
    
#core options
    echo "#Verbena analysis CORE options" > core_options.txt
    echo "--mask=mask" >> core_options.txt
    echo "--noise=white" >> core_options.txt
    echo "--model=dsc" >> core_options.txt
    echo "--allow-bad-voxels" >> core_options.txt
    echo "--save-model-fit" >> core_options.txt
    echo "--te=$te" >> core_options.txt
    echo "--delt=$tr" >> core_options.txt
    echo "--inferdelay" >> core_options.txt
    echo "--infermtt" >> core_options.txt
    echo "--inferlambda" >> core_options.txt
    if [ ! -z $aifconc ]; then
	# the aif is concentration and we need to tell fabber
	echo "--aifconc" >> core_options.txt
    fi

    if [ ! -z $save_residue ]; then
	# Save the residue function which is a model 'extra'
	echo "--save-model-extras" >> core_options.txt
    fi

    if [ ! -z $logcbf ]; then
	# Infer log of CBF internally. Need to increase prior
    # precision slightly to avoid overflows
	echo "--PSP_byname1=cbf" >> core_options.txt
	echo "--PSP_byname1_transform=L" >> core_options.txt
	echo "--PSP_byname1_prec=0.0001" >> core_options.txt
    fi
    
    echo "#Verbena analysis options (VM)" > options.txt
    cat core_options.txt >> options.txt
    echo "--method=spatialvb" >> options.txt
    echo "--param-spatial-priors=MN+" >> options.txt
    echo "--max-iterations=20" >> options.txt 
    
    if [ ! -z $modelfreeinit ]; then
    # make inital parameter estimates from model-free analysis
    # run fabber to get the right sized MVN
	rm -r init*
	$fabber --data=data --data-order=singlefile --output=init --suppdata=aif --method=vb --max-iterations=1 -@ core_options.txt
	
    # assemble the intial MVN for fabber
	$mvntool --input=init/finalMVN --output=init_MVN --param=2 --valim=modfree_magnitude_nonans --var=100 --mask=mask --write
	fslmaths mtt -thr 0.0001 -log mtt_log
	$mvntool --input=init_MVN --output=init_MVN --param=4 --valim=mtt_log --var=10 --mask=mask --write
	$mvntool --input=init_MVN --output=init_MVN --param=5 --val=2 --var=1 --mask=mask --write
	$mvntool --input=init_MVN --output=init_MVN --param=3 --val=5 --var=1 --mask=mask --write
	$mvntool --input=init_MVN --output=init_MVN --param=1 --valim=szero --var=1 --mask=mask --write
	
	echo "--continue-from-mvn=init_MVN --continue-fwd-only" >> options.txt
    fi
    
    rm -r vm*
    $fabber --data=data --data-order=singlefile --output=vm --suppdata=aif  -@ options.txt
    
    #copy results to output directory
    cd "$stdir"
    mkdir $outdir/vm
    imcp $tempdir/vm/mean_cbf $outdir/vm/rcbf
    fslmaths $tempdir/vm/mean_transitm -mas $tempdir/mask $outdir/vm/mtt
    fslmaths $tempdir/vm/mean_lambda -mas $tempdir/mask $outdir/vm/lambda
	if [ ! -z $save_residue ]; then
        fslmaths $tempdir/vm/dsc_residual -mas $tempdir/mask $outdir/vm/residue
    fi
	if [ ! -z $save_model_fit ]; then
        fslmaths $tempdir/vm/modelfit -mas $tempdir/mask $outdir/vm/modelfit
    fi
    cd $tempdir
    
# --- [ VM plus MV ] ---
    if [ ! -z $mv ]; then
	echo "Begin VM + MV analysis"

        #calculate cbv - used for intitalisation (this is just a model-free calculation)
	fslmaths concdata -Tmean -mul `fslnvols concdata` concsum
	fslmaths concaif -Tmean -mul `fslnvols concaif` aifsum
	fslmaths concdata -div aifsum cbv
    
        # sort out intial MVN
	$mvntool --input=vm/finalMVN.nii.gz --param=2 --output=init_cbf --val --mask=mask
	fslmaths init_cbf -div 10 init_cbf
	$mvntool --input=vm/finalMVN.nii.gz --param=2 --output=tempmvn --valim=init_cbf --write --mask=mask
	$mvntool --input=tempmvn --param=4 --output=tempmvn --valim=cbv --var=0.1 --new --mask=mask
	$mvntool --input=tempmvn.nii.gz --param=5 --output=tempmvn --val=5 --var=1 --new --mask=mask
	
	echo "#Verneba analysis options (VM+MV)" > mvoptions.txt
	cat core_options.txt >> mvoptions.txt
	echo "--method=spatialvb" >> mvoptions.txt
	echo "--param-spatial-priors=MMNANNN" >> mvoptions.txt
	echo "--max-iterations=20" >> mvoptions.txt 
	echo "--inferart" >> mvoptions.txt
	if [ ! -z $sigadd ]; then
	echo "--artoption" >> mvoptions.txt
	fi
	
	rm -r vm_mv*
	$fabber --data=data --data-order=singlefile --suppdata=aif --output=vm_mv --continue-from-mvn=tempmvn -@ mvoptions.txt
	
    #copy results to output directory
	cd "$stdir"
	mkdir $outdir/vm_mv
	fslmaths $tempdir/vm_mv/mean_cbf -thr 0 $outdir/vm_mv/rcbf
	fslmaths $tempdir/vm_mv/mean_transitm -mas $tempdir/mask $outdir/vm_mv/mtt
	fslmaths $tempdir/vm_mv/mean_lambda -mas $tempdir/mask $outdir/vm_mv/lambda
	fslmaths $tempdir/vm_mv/mean_abv -thr 0 $outdir/vm_mv/rabv
	if [ ! -z $save_residue ]; then
        fslmaths $tempdir/vm_mv/dsc_residual -mas $tempdir/mask $outdir/vm_mv/residue
    fi
	if [ ! -z $save_model_fit ]; then
        fslmaths $tempdir/vm_mv/modelfit -mas $tempdir/mask $outdir/vm_mv/modelfit
    fi
    cd $tempdir
    fi
fi

# clearup
cd "$stdir" # make sure we are back where we started
if [ -z $debug ]; then
    echo "Tidying up"
    rm -r $tempdir
else
mv $tempdir .
fi

echo "Verbena done"
